{"version":3,"sources":["component/Input.js","component/DefaultButton.js","component/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","className","children","DefaultButton","onClick","handleClick","ClearButton","handleClear","App","state","bind","Equal","value","this","setState","math","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAKeA,G,YAFD,SAACC,GAAD,OAAW,yBAAKC,UAAU,SAAf,IAAyBD,EAAME,SAA/B,OCIVC,G,MAJO,SAACH,GAAD,OAAW,yBAAKC,UAAU,gBAChDG,QAAU,kBAAMJ,EAAMK,YAAYL,EAAME,YADP,IAE9BF,EAAME,SAFwB,OCIlBI,G,MAJK,SAACN,GAAD,OAAW,yBAAKC,UAAU,QAC9CG,QAASJ,EAAMO,aADgB,IAE5BP,EAAME,SAFsB,O,QC0EhBM,E,YArEb,WAAYR,GAAO,IAAD,8BAChB,4CAAMA,KACDS,MAAO,CACVV,MAAO,IAET,EAAKM,YAAc,EAAKA,YAAYK,KAAjB,gBACnB,EAAKH,YAAc,EAAKA,YAAYG,KAAjB,gBACnB,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBAPG,E,yEAURE,GACVC,KAAKC,SAAU,CACbf,MAAOc,KAAKJ,MAAMV,MAAQa,M,oCAK5BC,KAAKC,SAAU,CACbf,MAAO,O,8BAKTc,KAAKC,SAAS,CACZf,MAAQgB,IAAcF,KAAKJ,MAAMV,W,+BAG1B,IAAD,OACR,OACE,yBAAKE,UAAU,OAEb,kBAAC,EAAD,KAASY,KAAKJ,MAAMV,OACpB,yBAAKE,UAAU,UAEf,yBAAKA,UAAU,OACf,kBAAC,EAAD,CAAeI,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,MAGA,yBAAKJ,UAAU,OACf,kBAAC,EAAD,CAAeI,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,MAGA,yBAAKJ,UAAU,OACf,kBAAC,EAAD,CAAeI,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,MAGA,yBAAKJ,UAAU,OACf,kBAAC,EAAD,CAAeI,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAeQ,KAAKR,aAAnC,KACA,kBAAC,EAAD,CAAeA,YAAe,kBAAM,EAAKM,UAAzC,KAHA,IAIA,kBAAC,EAAD,CAAeN,YAAeQ,KAAKR,aAAnC,OAIA,kBAAC,EAAD,CAAaE,YAAeM,KAAKN,aAAjC,W,GAhEYS,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d8bf25b5.chunk.js","sourcesContent":["import React  from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = (props) => <div className='Input'> {props.children} </div>\r\n\r\nexport default Input;","import React  from 'react';\r\nimport './DefaultButton.css';\r\n\r\nconst DefaultButton = (props) => <div className='DefaultButton'\r\nonClick ={() => props.handleClick(props.children)}\r\n> {props.children} </div>\r\n\r\nexport default DefaultButton;","import React  from 'react';\r\nimport './ClearButton.css';\r\n\r\nconst ClearButton = (props) => <div className='Clear'\r\nonClick={props.handleClear}\r\n> {props.children} </div>\r\n\r\nexport default ClearButton;","import React , { Component } from 'react';\nimport './App.css';\nimport Input from './component/Input';\nimport DefaultButton from './component/DefaultButton';\nimport ClearButton from './component/ClearButton';\nimport * as math from 'mathjs'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state ={\n      Input: ''\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.handleClear = this.handleClear.bind(this)\n    this.Equal = this.Equal.bind(this)\n  }\n\nhandleClick(value){\n  this.setState ({\n    Input: this.state.Input + value\n  })\n}\n\nhandleClear(){\n  this.setState ({\n    Input: ''\n  })\n}\n\nEqual(){\n  this.setState({\n    Input : math.evaluate(this.state.Input)\n  })\n}\n  render(){\n  return (\n    <div className=\"App\">\n      \n      <Input >{this.state.Input}</Input>\n      <div className='button'>\n\n      <div className='row'>\n      <DefaultButton handleClick = {this.handleClick}>7</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>8</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>9</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>/</DefaultButton>\n      </div>\n\n      <div className='row'>\n      <DefaultButton handleClick = {this.handleClick}>4</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>5</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>6</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>*</DefaultButton>\n      </div>\n\n      <div className='row'>\n      <DefaultButton handleClick = {this.handleClick}>1</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>2</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>3</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>+</DefaultButton>\n      </div>\n\n      <div className='row'>\n      <DefaultButton handleClick = {this.handleClick}>0</DefaultButton>\n      <DefaultButton handleClick = {this.handleClick}>.</DefaultButton>\n      <DefaultButton handleClick = {() => this.Equal()}>=</DefaultButton> {/* () tuc la k can tham so*/}\n      <DefaultButton handleClick = {this.handleClick}>-</DefaultButton>\n      </div>\n\n      </div>\n      <ClearButton handleClear = {this.handleClear}>AC</ClearButton>\n    </div>\n  );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}